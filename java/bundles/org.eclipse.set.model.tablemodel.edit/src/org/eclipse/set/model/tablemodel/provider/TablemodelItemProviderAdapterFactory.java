/**
 * Copyright (c) 2022 DB Netz AG and others.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 */
package org.eclipse.set.model.tablemodel.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.set.model.tablemodel.util.TablemodelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TablemodelItemProviderAdapterFactory extends TablemodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TablemodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.set.model.tablemodel.Table} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableItemProvider tableItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.set.model.tablemodel.Table}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableAdapter() {
		if (tableItemProvider == null) {
			tableItemProvider = new TableItemProvider(this);
		}

		return tableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.set.model.tablemodel.ColumnDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnDescriptorItemProvider columnDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.set.model.tablemodel.ColumnDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnDescriptorAdapter() {
		if (columnDescriptorItemProvider == null) {
			columnDescriptorItemProvider = new ColumnDescriptorItemProvider(this);
		}

		return columnDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.set.model.tablemodel.TableContent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableContentItemProvider tableContentItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.set.model.tablemodel.TableContent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableContentAdapter() {
		if (tableContentItemProvider == null) {
			tableContentItemProvider = new TableContentItemProvider(this);
		}

		return tableContentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.set.model.tablemodel.RowGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RowGroupItemProvider rowGroupItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.set.model.tablemodel.RowGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRowGroupAdapter() {
		if (rowGroupItemProvider == null) {
			rowGroupItemProvider = new RowGroupItemProvider(this);
		}

		return rowGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.set.model.tablemodel.TableRow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableRowItemProvider tableRowItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.set.model.tablemodel.TableRow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableRowAdapter() {
		if (tableRowItemProvider == null) {
			tableRowItemProvider = new TableRowItemProvider(this);
		}

		return tableRowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.set.model.tablemodel.TableCell} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableCellItemProvider tableCellItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.set.model.tablemodel.TableCell}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableCellAdapter() {
		if (tableCellItemProvider == null) {
			tableCellItemProvider = new TableCellItemProvider(this);
		}

		return tableCellItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.set.model.tablemodel.StringCellContent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringCellContentItemProvider stringCellContentItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.set.model.tablemodel.StringCellContent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringCellContentAdapter() {
		if (stringCellContentItemProvider == null) {
			stringCellContentItemProvider = new StringCellContentItemProvider(this);
		}

		return stringCellContentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.set.model.tablemodel.CompareCellContent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompareCellContentItemProvider compareCellContentItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.set.model.tablemodel.CompareCellContent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompareCellContentAdapter() {
		if (compareCellContentItemProvider == null) {
			compareCellContentItemProvider = new CompareCellContentItemProvider(this);
		}

		return compareCellContentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.set.model.tablemodel.CellAnnotation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CellAnnotationItemProvider cellAnnotationItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.set.model.tablemodel.CellAnnotation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCellAnnotationAdapter() {
		if (cellAnnotationItemProvider == null) {
			cellAnnotationItemProvider = new CellAnnotationItemProvider(this);
		}

		return cellAnnotationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.set.model.tablemodel.MultiColorCellContent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiColorCellContentItemProvider multiColorCellContentItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.set.model.tablemodel.MultiColorCellContent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiColorCellContentAdapter() {
		if (multiColorCellContentItemProvider == null) {
			multiColorCellContentItemProvider = new MultiColorCellContentItemProvider(this);
		}

		return multiColorCellContentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.set.model.tablemodel.MultiColorContent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiColorContentItemProvider multiColorContentItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.set.model.tablemodel.MultiColorContent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiColorContentAdapter() {
		if (multiColorContentItemProvider == null) {
			multiColorContentItemProvider = new MultiColorContentItemProvider(this);
		}

		return multiColorContentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.set.model.tablemodel.CompareFootnoteContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompareFootnoteContainerItemProvider compareFootnoteContainerItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.set.model.tablemodel.CompareFootnoteContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompareFootnoteContainerAdapter() {
		if (compareFootnoteContainerItemProvider == null) {
			compareFootnoteContainerItemProvider = new CompareFootnoteContainerItemProvider(this);
		}

		return compareFootnoteContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.set.model.tablemodel.SimpleFootnoteContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleFootnoteContainerItemProvider simpleFootnoteContainerItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.set.model.tablemodel.SimpleFootnoteContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleFootnoteContainerAdapter() {
		if (simpleFootnoteContainerItemProvider == null) {
			simpleFootnoteContainerItemProvider = new SimpleFootnoteContainerItemProvider(this);
		}

		return simpleFootnoteContainerItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (tableItemProvider != null) tableItemProvider.dispose();
		if (columnDescriptorItemProvider != null) columnDescriptorItemProvider.dispose();
		if (tableContentItemProvider != null) tableContentItemProvider.dispose();
		if (rowGroupItemProvider != null) rowGroupItemProvider.dispose();
		if (tableRowItemProvider != null) tableRowItemProvider.dispose();
		if (tableCellItemProvider != null) tableCellItemProvider.dispose();
		if (stringCellContentItemProvider != null) stringCellContentItemProvider.dispose();
		if (compareCellContentItemProvider != null) compareCellContentItemProvider.dispose();
		if (cellAnnotationItemProvider != null) cellAnnotationItemProvider.dispose();
		if (multiColorCellContentItemProvider != null) multiColorCellContentItemProvider.dispose();
		if (multiColorContentItemProvider != null) multiColorContentItemProvider.dispose();
		if (compareFootnoteContainerItemProvider != null) compareFootnoteContainerItemProvider.dispose();
		if (simpleFootnoteContainerItemProvider != null) simpleFootnoteContainerItemProvider.dispose();
	}

}
